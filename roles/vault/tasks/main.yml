# Copyright (c) 2024, Itential, Inc
# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)
---
- name: Validate installation variables
  ansible.builtin.assert:
    that: iap_release is defined or vault_packages is defined
    msg: "Either iap_release or vault_packages must be defined"
  tags: always

- name: Set installation variables when using IAP release defaults
  when: iap_release is defined
  tags: always
  block:
    - name: Load release default variables
      ansible.builtin.include_vars:
        file: "{{ item }}"
      with_first_found:
        - "release-{{ iap_release }}.yml"
        - "release-undefined.yml"

    - name: Check for valid Vault release
      ansible.builtin.assert:
        that: vault_invalid_release is not defined
        msg: "Deployer does not support installing Vault for IAP version {{ iap_release }}"

    - name: Set vault_packages to the default value when not defined in inventory
      ansible.builtin.set_fact:
        vault_packages: "{{ vault_packages_default[ansible_distribution_major_version] }}"
      when: vault_packages is not defined

- name: Print vault_packages
  ansible.builtin.debug:
    var: vault_packages
  when: vault_packages is defined

# - name: Exit
#   ansible.builtin.fail:
#     msg: Exiting...
#   when: true

# - name: Install base OS packages
#   ansible.builtin.include_role:
#     name: os
#   tags: install_base_os_packages

- name: Include tasks to install vault (online)
  ansible.builtin.include_tasks:
    file: vault-online.yml
  when: not offline_install

- name: Include tasks to install vault (offline)
  ansible.builtin.include_tasks:
    file: vault-offline.yml
  when: offline_install

- name: Create vault group
  ansible.builtin.group:
    name: "{{ vault_group }}"
    state: present

- name: Create vault user
  ansible.builtin.user:
    name: "{{ vault_user }}"
    group: "{{ vault_group }}"
    state: present

- name: Ensure the directories for the vault data exists
  ansible.builtin.file:
    path: "{{ vault_dir }}/data"
    state: directory
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    mode: "0770"

# Check if firewalld is running, if it is then open the appropriate ports
- name: Gather service facts
  ansible.builtin.service_facts:

- name: Open vault ports on FirewallD Public Zone
  ansible.posix.firewalld:
    port: "{{ vault_port }}/tcp"
    permanent: true
    state: enabled
    zone: public
    immediate: true
  with_items:
    - "{{ vault_port }}"
    - "{{ vault_cluster_port }}"
  when:
    - ansible_facts.services["firewalld.service"] is defined
    - ansible_facts.services["firewalld.service"].state == "running"
    - ansible_facts.services["firewalld.service"].status == "enabled"

# Configure vault
- name: Create vault config file
  ansible.builtin.template:
    src: "config.hcl.j2"
    dest: "{{ vault_dir }}/config.hcl"
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    mode: "0640"

- name: Create service unit file
  ansible.builtin.template:
    src: "vault.service.j2"
    dest: /etc/systemd/system/vault.service
    owner: root
    group: root
    mode: "0644"

- name: Enable and restart vault
  ansible.builtin.systemd:
    name: vault
    state: restarted
    enabled: true
    daemon_reload: true

- name: Capture vault version
  ansible.builtin.command:
    cmd: vault --version
  register: vault_installed_version
  changed_when: vault_installed_version.rc != 0

- name: Update release file with vault version
  ansible.builtin.lineinfile:
    path: "{{ itential_release_file }}"
    line: "VAULT={{ vault_installed_version.stdout }}"
    mode: "0644"
    create: true
